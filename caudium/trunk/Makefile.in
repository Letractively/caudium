# @configure_input@
SRCDIR=@srcdir@
VPATH=@srcdir@
prefix=@prefix@

@SET_MAKE@

INSTALL=@INSTALL@
INSTALLFILES=BUGS README.ssl3 README.history CONTRIBUTORS README TODO COPYING

CC=@CC@
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@
PIKE=@PIKE@
# Used to avoid make compatibility problems.
BIN_TRUE=":"
#extern tools
all:	src 
	-@$(BIN_TRUE)

extern: force
	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" all)

tools: force
	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" all)
src: force
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" all)

force:
	-@$(BIN_TRUE)

# These are here for compatibility with the easy-start makefile
easy: all
	-@$(BIN_TRUE)

hard: all
	-@$(BIN_TRUE)

depend:
	-@(cd src/cmods/;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" depend)

clean:

#	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
#	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
install: all install_only 
	-@$(BIN_TRUE)

install_src: 
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" install)


install_only:  install_src
	@$(SRCDIR)/mkdir -p $(prefix)/caudium/readme/
	@for f in $(INSTALLFILES); do \
          echo "Copying $$f..."; \
	  cp $(SRCDIR)/$$f $(prefix)/caudium/readme/; \
	done
	@if test -d $(prefix)/caudium/server.old/.; then \
	  if test -d $(prefix)/caudium/server.older/.; then \
	    echo; \
	    echo "Warning, deleting old server \"$(prefix)/caudium/server.older\""; \
	    echo; \
	    rm -rf $(prefix)/caudium/server.older; \
	  fi; \
	  mv -f $(prefix)/caudium/server.old $(prefix)/caudium/server.older; \
	fi
	@if test -d $(prefix)/caudium/server/.; then \
	  mv -f $(prefix)/caudium/server $(prefix)/caudium/server.old ; \
	fi
	cp -r $(SRCDIR)/server $(prefix)/caudium/
	@if test -f $(prefix)/caudium/server.old/etc/environment ; then \
	  cp $(prefix)/caudium/server.old/etc/environment $(prefix)/caudium/server/etc/ ; \
	fi
	@rm -rf	`find $(prefix)/caudium/server/ -name CVS -print`
	-@rm -f $(prefix)/caudium/server/bin/caudium >/dev/null 2>&1
	ln -s $(PIKE) $(prefix)/caudium/server/bin/caudium
	for d in local local/modules local/nfonts server/lib ; \
	  do \
	    test -d $(prefix)/caudium/$$d/. || mkdir $(prefix)/caudium/$$d; \
	done
	test -d $(prefix)/caudium/server/include/. || mkdir $(prefix)/caudium/server/include
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/logs
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/configurations
	-chmod a+rx $(prefix)
	-chmod a+rx $(prefix)/caudium
	-chmod a+rx $(prefix)/caudium/server
	-@for d in fonts nfonts modules etc bin base_server more_modules \
		   config_actions server_templates \
	           languages caudium-images protocols unfinishedmodules; do \
	  echo Modifying permissions for directory $(prefix)/caudium/server/$$d... ; \
	  find $(prefix)/caudium/server/$$d -type d -exec chmod a+x '{}' \; ; \
	  chmod -R a+r $(prefix)/caudium/server/$$d ;\
	done
	-@for f in fcgi install.pike pdbi.pike pike caudium; \
	do \
	  if test -f $(prefix)/caudium/server/bin/$$f ; then \
	    echo Modifying permissions for file $(prefix)/caudium/server/bin/$$f... ; \
	    chmod a+rx $(prefix)/caudium/server/bin/$$f; \
	  else :; fi; \
	done
	@echo "Caudium installed."

spotless:  clean
#	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
#	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	@(cd src/;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	rm -f server/bin/selfdir server/bin/caudium_hostname server/bin/proxygarb 
	find . '(' -name '#*#' -o -name '*~' -o -name '.*~' -o -name '*.bak'\
        -o -name '.pine-debug*' -o -name '.*.bak' -o -name core -o -name \
	config.cache -o -name config.status -o -name config.log -o -name \
	"*.a" ')'  -print -exec /bin/rm '{}'  ';'
	rm -rf server/logs
	rm -rf logs


distribute:	spotless
	@(cd extern; $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" distribute)
	@(cd tools; $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" distribute)

run_autoconfig:
	@(cd $(SRCDIR); pike/$(PIKEVERSION)/src/run_autoconfig .)

./Makefile: $(SRCDIR)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="" ./config.status
	@echo "Run make again"
	@exit 1

bump_version.stamp:
	@touch bump_version.stamp

bump_version: bump_version.stamp
	@if test -f $(SRCDIR)/server/base_server/caudium.pike.new; then \
	  echo Deleting old $(SRCDIR)/server/base_server/caudium.pike.new...; \
	  rm $(SRCDIR)/server/base_server/caudium.pike.new || exit 1; \
	else : ; fi
# Do not update the source.
#	@(cd $(SRCDIR); \
#	  echo Updating sources...; \
#	  if cvs -q update -d|egrep '^[CM?]'; then exit 1; else : ; fi; \
#	)
# Do not update the Pike build for every Caudium build. Irritates people.
#	@for d in $(SRCDIR)/pike/0.5 $(SRCDIR)/pike/0.6; do \
#	  if test -f $$d/src/version.c; then \
#	    (cd $$d/; \
#	      echo Bumping Pike version in directory $$d...; \
#	      build=`sed <src/version.c -e'/push_text/s/.* \([0-9]*\).*/\1/p' -ed|head -1`; \
#	      newbuild=`echo $$build 1+p|dc`; \
#	      sed <src/version.c -e"/push_text/s/ $$build/ $$newbuild/" >src/version.c.new; \
#	      checkbuild=`sed <src/version.c.new -e'/push_text/s/.* \([0-9]*\).*/\1/p' -ed|head -1`; \
#	      if test "x$$newbuild" = "x$$checkbuild"; then \
#		mv -f src/version.c.new src/version.c || exit 1; \
#		echo "Successfull bump to build $$newbuild."; \
#	      else \
#		echo "Version bump failed: $$newbuild != $$checkbuild."; \
#		exit 1; \
#	      fi; \
#	      cvs ci -m "Pike release bumped to $$newbuild by bump_version." src/version.c || exit 1; \
#	      echo "Tagging Pike in $$d..."; \
#	      cvs tag `sed <src/version.c -e '/push_text/s/.*"\(.*\)".*/\1/p' -ed|tr 'A-Z. ' 'a-z__'|head -1`||exit 1; \
#	      echo Done with $$d.); \
#	  else :; fi; \
#	done
#end pike version bump
	@(cd $(SRCDIR)/server/base_server; \
	  echo Bumping Caudium version...; \
	  build=`sed <caudium.pike -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  newbuild=`echo $$build 1+p|dc`; \
	  sed <caudium.pike -e"/__caudium_build__/s/$$build/$$newbuild/" >caudium.pike.new; \
	  checkbuild=`sed <caudium.pike.new -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  if test "x$$newbuild" = "x$$checkbuild"; then \
	    mv -f caudium.pike.new caudium.pike || exit 1; \
	    echo "Successfull bump to build $$newbuild."; \
	  else \
	    echo "Version bump failed: $$newbuild != $$checkbuild."; \
	    exit 1; \
	  fi; \
	  version=`sed <caudium.pike -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	  cvs ci -m "Version bumped to $$version.$$newbuild by bump_version." caudium.pike || exit 1; \
	  echo "Caudium $$version.$$newbuild" >../../VERSION; \
	  cat ../../VERSION; \
	)
	@(cd $(SRCDIR); \
	  echo Tagging...; \
	  cvs tag `cat VERSION | tr 'A-Z. ' 'a-z__'`||exit 1; \
	)
	@touch bump_version

same_version:
	@cd $(SRCDIR)/server/base_server; \
	 build=`sed <caudium.pike -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	 version=`sed <caudium.pike -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	 echo "Caudium $$version.$$build" >../../VERSION;


$(SRCDIR)/ChangeLog.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike | gzip -9 > ChangeLog.gz

$(SRCDIR)/ChangeLog.rxml.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike --rxml | gzip -9 > ChangeLog.rxml.gz

force_update: force
	@rm $(SRCDIR)/ChangeLog.gz $(SRCDIR)/ChangeLog.rxml.gz \
	    $(SRCDIR)/VERSION bump_version bump_version.stamp \
	    2>/dev/null || true
	@echo Prepared for version update.

pre_dist: bump_version
	-@$(MAKE) depend
	-@$(MAKE) new_peep_engine
	-@$(MAKE) run_autoconfig
#	@(cd pike; $(MAKE) pre_dist)

same_pre_dist: same_version
	-@$(MAKE) depend
	-@$(MAKE) new_peep_engine
	-@$(MAKE) run_autoconfig

faked_pre_dist:
	echo "Caudium 1.3.test_build" > $(SRCDIR)/VERSION
	-@$(MAKE) depend
	-@$(MAKE) new_peep_engine
	-@$(MAKE) run_autoconfig

copy_dist: $(SRCDIR)/ChangeLog.gz $(SRCDIR)/ChangeLog.rxml.gz
	@if test -f $(SRCDIR)/VERSION; then :; else \
	  echo 'You need to make pre_dist first!'; \
	  exit 1; \
	fi
	@version=`cat $(SRCDIR)/VERSION | tr 'A-Z ' 'a-z_'`; \
	if ls -d $$version* >/dev/null 2>&1; then \
	  echo Deleting old distributions...; \
	  rm -rf $$version* || exit 1; \
	else :; fi; \
	mkdir $$version; \
	echo Copying files...; \
	(cd $(SRCDIR); tar cf - .)|(cd $$version; tar xf -; make dist_clean); \
	echo Cleaning up the copied sources...; \
	for f in `find $$version/. -type f -name '*~' -print` \
	  `find $$version/. -type f -name '.#*' -print` \
	  `find $$version/. -type f -name '#*#' -print`; do \
	  echo $$f; rm $$f || exit 1; \
	done; \
	for d in \
	  $$version/pike/0.6/about_pike $$version/pike/0.6/doc; do \
	  if test -d $$d/. ; then \
	    echo Removing $$d...; rm -rf $$d || exit 1; \
	  else :; fi; \
	done; \
	echo "Zapping absolute paths in language.c..."; \
	for f in $$version/pike/*/src/language.c; do \
	  if test -f "$$f"; then \
	    echo "Fixing $$f.."; \
	    sed <"$$f" >"$$f.fix" -e '/^#line/s!/.*/\(language\.yacc\)!\1!' && \
	      mv "$$f.fix" "$$f"; \
	  else :; fi; \
	done;

tar_dist:
	@version=`cat $(SRCDIR)/VERSION | tr 'A-Z ' 'a-z_'`; \
	echo "Altering some CVS files to point to developer.caudium.com..."; \
	for f in `find $$version/ -type d -name CVS -print`; do \
	  if egrep '^//*cvs//*caudium_src' "$$f/Repository" 2>&1 >/dev/null; \
	  then \
	    echo "Altering $$f..."; \
	    sed -e 's/^\/\/*cvs\/\/*caudium_src/\/cvs\/caudium/' <"$$f/Repository" \
	      >"$$f/Repository.new" && \
	      mv "$$f/Repository.new" "$$f/Repository"; \
	    echo "anonymous@developer.caudium.com:/cvs" >"$$f/Root"; \
	  else :; fi; \
	done; \
	echo Determining if this is a 0.5, 0.6 or dual distribution...; \
	if test -d $$version/pike/0.5/. ; then \
	  if test -d $$version/pike/0.6/. ; then \
	    type="dual"; \
	  else \
	    type="0.5"; \
	  fi ; \
	else \
	  if test -d $$version/pike/0.6/. ; then \
	    type="0.6"; \
	  else \
	    type="no_pike"; \
	  fi ; \
	fi; \
	if test -d platform/. ; then \
	  type=$$type-pf; \
	else :; fi; \
	echo Type $$type.; \
	echo "Storing away manuals..."; \
	mv $$version/server/manual/*parsed*.tar . || exit 1; \
	echo "Restoring Pro manual..."; \
	cp unparsed_pro.tar $$version/server/manual/unparsed.tar || exit 1; \
	cp parsed_pro.tar $$version/server/manual/parsed.tar || exit 1; \
	echo "Building full Pro distribution..."; \
	tar cf - $$version | gzip -9 >$$version-$$type-pro.tar.gz; \
	if (cd $$version; make keep_dbapi || exit 1); then \
	  mv $$version/dbapi.tar . || exit 1; \
	else :; fi; \
	if (cd $$version; make keep_pro || exit 1); then \
	  mv $$version/pro.tar . || exit 1; \
	else :; fi; \
	(cd $$version; make censor_dbapi || exit 1); \
	(cd $$version; make censor_pro || exit 1); \
	echo "Removing Pro manual and restoring Challenger manual..."; \
	rm $$version/server/manual/*parsed*.tar || exit 1; \
	cp unparsed_challenger.tar $$version/server/manual/unparsed.tar \
	 || exit 1; \
	cp parsed_challenger.tar $$version/server/manual/parsed.tar \
	 || exit 1; \
	echo "Building full Challenger distribution..."; \
	tar cf - $$version | gzip -9 >$$version-$$type.tar.gz; \
	(cd $$version; make censor_crypto || exit 1); \
	echo "Building lobotomized Challenger distribution..."; \
	tar cf - $$version | gzip -9 >$$version-$$type-int.tar.gz; \
	echo "Restoring DBAPI..."; \
	(cd $$version; tar xf ../dbapi.tar || exit 1); \
	echo "Restoring Challenger Pro parts..."; \
	(cd $$version; tar xf ../pro.tar || exit 1); \
	echo "Removing Challenger manual and restoring Pro manual..."; \
	rm $$version/server/manual/*parsed*.tar || exit 1; \
	cp unparsed_pro.tar $$version/server/manual/unparsed.tar || exit 1; \
	cp parsed_pro.tar $$version/server/manual/parsed.tar || exit 1; \
	echo "Building lobotomized Pro distribution..."; \
	tar cf - $$version | gzip -9 >$$version-$$type-pro-int.tar.gz; \
	(mkdir 40bit-nda; cd 40bit-nda; gzip -cd < ../$$version-$$type-pro.tar.gz | tar xf -; cd $$version; make censor_strong_crypto || exit 1); \
	echo "Building 40bit Pro distribution..."; \
	(cd 40bit-nda; tar cf - $$version | gzip -9 >../$$version-$$type-pro-40bit.tar.gz || exit 1); \
	rm -rf 40bit-nda; \
	(mkdir 40bit; cd 40bit; gzip -cd < ../$$version-$$type.tar.gz | tar xf -; cd $$version; make censor_strong_crypto || exit 1; make censor_pro || exit 1); \
	echo "Removing Pro manual and restoring Challenger manual..."; \
	rm $$version/server/manual/*parsed*.tar || exit 1; \
	cp unparsed_challenger.tar $$version/server/manual/unparsed.tar \
	 || exit 1; \
	cp parsed_challenger.tar $$version/server/manual/parsed.tar \
	 || exit 1; \
	echo "Building 40bit ordinary distribution..."; \
	(cd 40bit; tar cf - $$version | gzip -9 >../$$version-$$type-40bit.tar.gz || exit 1); \
	rm -rf 40bit;

dist: copy_dist tar_dist
	@echo Distribution build complete.

