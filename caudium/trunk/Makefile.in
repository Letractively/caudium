# @configure_input@
SRCDIR=@srcdir@
VPATH=@srcdir@
prefix=@prefix@
DESTDIR=
EXTRAVER=

@SET_MAKE@

INSTALL=@INSTALL@
INSTALLFILES=BUGS README.ssl3 README.history CONTRIBUTORS README TODO GPL-2 \
	     LGPL-2.1 CHANGES CHANGES-1.0.gz CHANGES-1.2.gz README.FreeBSD \
	     README.PHP4 README.Perl README.compatibility README.cvs \
	     INSTALLING License-Boilerplate-MPL-LGPL.txt README.Lucene \
             WARNING.pike

CC=@CC@
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@
PIKE=@PIKE@
PIKE_VERISON=@PIKE_VERSION@

# TMPDIR must contain a trailing slash.
TMPDIR=/tmp/
# Used to avoid make compatibility problems.
BIN_TRUE=":"
#extern tools
all:	src tools
	-@$(BIN_TRUE)

extern: force
	@(cd extern;$(MAKE) "prefix=$(prefix)" "LDFLAGS=$(LDFLAGS)" all)

tools: force
	@(cd tools;$(MAKE) "prefix=$(prefix)"  "LDFLAGS=$(LDFLAGS)" all)
src: force
	@(cd src;$(MAKE) "prefix=$(prefix)" all)

# Verify target
verify:	src tools
	@(cd src;$(MAKE) "prefix=$(prefix)" verify)

force:
	-@$(BIN_TRUE)

autodefvardocs:
	(cd $(SRCDIR); $(PIKE) tools/defvar2autodoc.pike `find server/modules/ -name "*.pike"` )

# These are here for compatibility with the easy-start makefile
easy: all
	-@$(BIN_TRUE)

hard: all
	-@$(BIN_TRUE)

depend:
	-@(cd src/cmods/;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" depend)

clean:
#	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
install: all install_only
	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" INSTALL="$(INSTALL)" install)
	-@$(BIN_TRUE)

install_bin:
	@if [ ! -d "$(prefix)/caudium/" -o \
              ! -d "$(prefix)/caudium/server/" -o \
              ! -d "$(prefix)/caudium/server/lib" ]; then \
         echo "install_bin only works when there is an existing Caudium "; \
         echo "installation. Please run 'make install' to install.";\
         exit 1; \
       fi;
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/server/lib/@PIKE_VERSION@
	-chmod a+rx $(prefix)/caudium/server/lib/@PIKE_VERSION@
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" install_bin)
	-@rm -f $(prefix)/caudium/server/bin/caudium-@PIKE_VERSION@
	@ln -s $(PIKE) $(prefix)/caudium/server/bin/caudium-@PIKE_VERSION@
	@echo "";\
	echo "*** Binaries for Pike @PIKE_VERSION@ installed. To start Caudium with";\
	echo "*** these binaries, run start with the --pike-version=@PIKE_VERSION@ argument.";\
	echo

install_only: 
	@$(SRCDIR)/mkdir -p $(prefix)/caudium/readme/
	$(SRCDIR)/mkdir -p $(prefix)/bin/
	@for f in $(INSTALLFILES); do \
          echo "Copying $$f..."; \
	  cp -p $(SRCDIR)/$$f $(prefix)/caudium/readme/; \
	done
	@if test -d $(prefix)/caudium/server.old/.; then \
	  if test -d $(prefix)/caudium/server.older/.; then \
	    echo; \
	    echo "Warning, deleting old server \"$(prefix)/caudium/server.older\""; \
	    echo; \
	    rm -rf $(prefix)/caudium/server.older; \
	  fi; \
	  mv -f $(prefix)/caudium/server.old $(prefix)/caudium/server.older; \
	fi
	@if test -d $(prefix)/caudium/server/.; then \
	  mv -f $(prefix)/caudium/server $(prefix)/caudium/server.old ; \
	fi
	cp -pr $(SRCDIR)/server $(prefix)/caudium/
	@if test -f $(prefix)/caudium/server.old/etc/environment ; then \
	  cp -p $(prefix)/caudium/server.old/etc/environment $(prefix)/caudium/server/etc/ ; \
	fi
#	OpenBSD rm doesn't like empty args
#	@rm -rf	`find $(prefix)/caudium/server/ -name CVS -print`
	@find $(prefix)/caudium/server/ -name \.svn -print | xargs rm -rf
	-@rm -f $(prefix)/caudium/server/bin/caudium >/dev/null 2>&1
	ln -s $(PIKE) $(prefix)/caudium/server/bin/caudium
	for d in local local/modules local/pmods local/nfonts server/lib ; \
	  do \
	    test -d $(prefix)/caudium/$$d/. || mkdir $(prefix)/caudium/$$d; \
	done
	test -d $(prefix)/caudium/server/include/. || mkdir $(prefix)/caudium/server/include
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/logs
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/configurations
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/var
	-@$(SRCDIR)/mkdir -p $(prefix)/caudium/server/lib/@PIKE_VERSION@
	-chmod a+rx $(prefix)
	-chmod a+rx $(prefix)/caudium
	-chmod a+rx $(prefix)/caudium/server
	-chmod a+rx $(prefix)/caudium/server/lib/
	-chmod a+rx $(prefix)/caudium/server/lib/@PIKE_VERSION@
	-@for d in fonts nfonts modules etc bin base_server \
		   config_actions server_templates \
	           languages caudium-images protocols unfinishedmodules; do \
	  echo Modifying permissions for directory $(prefix)/caudium/server/$$d... ; \
	  find $(prefix)/caudium/server/$$d -type d -exec chmod a+x '{}' \; ; \
	  chmod -R a+r $(prefix)/caudium/server/$$d ;\
          rm -f $(prefix)/caudium/server/start-caudium.in ; \
	done
	@(cd src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" install)
	-@for f in fcgi install.pike pdbi.pike pike caudium; \
	do \
	  if test -f $(prefix)/caudium/server/bin/$$f ; then \
	    echo Modifying permissions for file $(prefix)/caudium/server/bin/$$f... ; \
	    chmod a+rx $(prefix)/caudium/server/bin/$$f; \
	  else :; fi; \
	done
	@echo "Caudium installed."

#
# This target exists specifically for those people who make various distribution 
# packages, mainly on Linux systems but possibly useful on other systems as 
# well
#
install_alt:
	@$(SRCDIR)/mkdir -p $(DESTDIR)/etc/caudium$(EXTRAVER)/servers/
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/bin
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/lib/@PIKE_VERSION@
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/local_modules
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/local_pmods
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/share/caudium$(EXTRAVER)/local_fonts
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/share/doc/caudium$(EXTRAVER)
	@$(SRCDIR)/mkdir -p $(DESTDIR)/$(prefix)/share/man/man1
	@$(SRCDIR)/mkdir -p $(DESTDIR)/var/cache/caudium$(EXTRAVER)
	@$(SRCDIR)/mkdir -p $(DESTDIR)/var/log/caudium$(EXTRAVER)
	@$(SRCDIR)/mkdir -p $(DESTDIR)/var/run/caudium$(EXTRAVER)
	@$(SRCDIR)/mkdir -p $(DESTDIR)/usr/local/share/caudium$(EXTRAVER)/modules
	@for f in $(INSTALLFILES); do \
	 echo "Copying $$f ..."; \
	 cp -p $(SRCDIR)/$$f $(DESTDIR)/$(prefix)/share/doc/caudium$(EXTRAVER)/; \
	done
	@echo "Copying examples ..."
	@cp -pr $(SRCDIR)/examples $(DESTDIR)/$(prefix)/share/doc/caudium$(EXTRAVER)
	@rm -rf `find $(DESTDIR)/$(prefix)/share/doc/caudium$(EXTRAVER)/ -name \.svn -print`	
	@for f in base_server bin caudium-images config_actions etc fonts nfonts \
	          protocols languages server_templates modules \
			  unfinishedmodules; do \
	 echo "Copying $$f ..."; \
	 cp -pr $(SRCDIR)/server/$$f $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER); \
	done
	@rm -rf `find $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER) -name \.svn -or -name start-caudium.in`
	@echo "Copying modules..."
	@rm -rf `find $(DESTDIR)/$(prefix)/share/caudium$(EXTRAVER) -name \.svn -print`
	@for f in $(SRCDIR)/server/*; do \
	 if test -f $$f; then \
	  cp -p $$f $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER); \
	 fi; \
	done
	@echo "Fixing paths..."
	@MDIR="$(prefix)/lib/caudium$(EXTRAVER)"; CACHETOP="/var/cache/caudium$(EXTRAVER)"; \
	 for v in modules local_modules; do \
	  MODS="\\\"$$MDIR/$$v/\\\",$$MODS"; \
	 done; \
	 if test "$(prefix)" != "/usr/local"; then \
	  MODS="$$MODS\\\"/usr/local/share/caudium$(EXTRAVER)/modules/\\\""; \
	 else \
	  MODS="`echo $$MODS | sed -e 's;,$$;;g'`"; \
	 fi; \
	 sed -e "s;\(globvar(.*\"ModuleDirs\",\).*;\1({$$MODS}),;g" \
	     -e "s;\(globvar(.*\"font_dirs\",\).*;\1({\"$(prefix)/share/caudium$(EXTRAVER)/local_fonts\",\"nfonts\"}),;g" \
	     -e "s;\(globvar(.*\"logdirprefix\",.*\)\"../logs/\"\(.*\);\1\"/var/log/caudium$(EXTRAVER)/\"\2;g" \
	     -e "s;\(globvar(.*\"cachedir\",.*\)\"/tmp/caudium_cache/\"\(.*\);\1\"$$CACHETOP/\"\2;g" \
	     -e "s;\(globvar(.*\"pidfile\",.*\)\"/tmp/caudium_pid\"\(.*\);\1\"/var/run/caudium$(EXTRAVER)/caudium.pid\"\2;g" \
	  $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/base_server/caudium.pike > \
	  $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/base_server/caudium.pike.new; \
	 mv $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/base_server/caudium.pike.new \
	    $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/base_server/caudium.pike
	@(cd src;$(MAKE) "prefix=$(prefix)" "DESTDIR=$(DESTDIR)" \ "CC=$(CC)" \
	                 "LDFLAGS=$(LDFLAGS)" "EXTRAVER=$(EXTRAVER)"\
	                 "INSTALLDIR=$(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/lib/@PIKE_VERSION@/" install_alt)
	@ln -sf $(PIKE) $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/bin/caudium$(EXTRAVER)
	-@for f in fcgi install.pike pdbi.pike pike caudium$(EXTRAVER); \
	do \
	  if test -f $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/bin/$$f ; then \
	    echo Modifying permissions for file $(prefix)/lib/caudium$(EXTRAVER)/bin/$$f... ; \
	    chmod 755 $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/bin/$$f; \
	  else :; fi; \
	done
	@cp -p doc/caudiumctl.1 $(DESTDIR)/$(prefix)/share/man/man1/
	@cp -p doc/htpasswd-caudium.1 $(DESTDIR)/$(prefix)/share/man/man1/
	@cp -p doc/pixsl.1 $(DESTDIR)/$(prefix)/share/man/man1/
	@chmod 755 $(DESTDIR)/$(prefix)/lib/caudium$(EXTRAVER)/start-caudium
	@(cd tools;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" install)
	@echo "Caudium installed."

spotless:  force clean
#	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	@(cd tools/;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	@(cd src/;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	rm -f $srcdir/tools/caudium-rc_script smartlink
	rm -f $srcdir/server/start-caudium $srcdir/server/bin/install.pike
	-rm -rf $(shell find -name "autom4te.cache" -type d -print)
	find . '(' -name '#*#' -o -name '*~' -o -name '.*~' -o -name '*.bak'\
        -o -name '.pine-debug*' -o -name '.*.bak' -o -name core -o -name \
	config.cache -o -name config.status -o -name config.log -o -name \
	"*.a" -o -name configure ')'  -print -exec /bin/rm '{}'  ';'
	rm -rf server/logs
	rm -rf logs
	find . -name 'autom4te.cache' -print | xargs /bin/rm -rf

./Makefile: $(SRCDIR)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="" ./config.status
	@echo "Run make again"
	@exit 1

only_bump_version:  force
	@if test -f $(SRCDIR)/server/etc/modules/CaudiumVersion.pmod.new; then \
	  echo Deleting old $(SRCDIR)/server/etc/modules/CaudiumVersion.pmod.new...; \
	  rm $(SRCDIR)/server/etc/modules/CaudiumVersion.pmod.new || exit 1; \
	else : ; fi
	@(cd $(SRCDIR)/server/etc/modules/; \
	  echo Bumping Caudium version...; \
	  build=`sed <CaudiumVersion.pmod -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  newbuild=`echo $$build 1+p|dc`; \
	  sed <CaudiumVersion.pmod -e"/__caudium_build__/s/$$build/$$newbuild/" >CaudiumVersion.pmod.new; \
	  checkbuild=`sed <CaudiumVersion.pmod.new -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  if test "x$$newbuild" = "x$$checkbuild"; then \
	    mv -f CaudiumVersion.pmod.new CaudiumVersion.pmod || exit 1; \
	    echo "Successfull bump to build $$newbuild."; \
	  else \
	    echo "Version bump failed: $$newbuild != $$checkbuild."; \
	    exit 1; \
	  fi; \
	  version=`sed <CaudiumVersion.pmod -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	  svn ci -m "Version bumped to $$version.$$newbuild by bump_version." CaudiumVersion.pmod || exit 1; \
	  echo "Caudium $$version.$$newbuild" >../../../VERSION; \
	  cat ../../../VERSION; \
	)

bump_version: force only_bump_version
	@(cd $(SRCDIR); \
	  echo Tagging...; \
	  svn copy trunk/caudium tags/`cat VERSION | tr 'A-Z. ' 'a-z__'`/caudium ||exit 1; \
	)
	@touch bump_version


same_version: force
	@cd $(SRCDIR)/server/etc/modules; \
	 build=`sed <CaudiumVersion.pmod -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	 version=`sed <CaudiumVersion.pmod -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	 echo "Caudium $$version.$$build" >../../../VERSION;

date_version: force
	@cd $(SRCDIR)/server/etc/modules; \
	 build=`sed <CaudiumVersion.pmod -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	 version=`sed <CaudiumVersion.pmod -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	 echo "Caudium $$version.$$build `date '+%Y%m%d'`-svn" >../../../VERSION;

xenofarm_version: force
	@cd $(SRCDIR)/server/etc/modules; \
	 echo "$(RESULT)" >../../../VERSION;


$(SRCDIR)/ChangeLog.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike | gzip -9 > ChangeLog.gz

$(SRCDIR)/ChangeLog.rxml.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike --rxml | gzip -9 > ChangeLog.rxml.gz

force_update: force
	@rm $(SRCDIR)/ChangeLog.gz $(SRCDIR)/ChangeLog.rxml.gz \
	    $(SRCDIR)/VERSION bump_version bump_version.stamp \
	    2>/dev/null || true
	@echo Prepared for version update.

pre_dist: bump_version
#	@(cd pike; $(MAKE) pre_dist)

same_pre_dist: same_version

faked_pre_dist:
	echo "Caudium 1.3-test" > $(SRCDIR)/VERSION

date_pre_dist:  date_version

xenofarm_pre_dist:  xenofarm_version

#copy_dist: $(SRCDIR)/ChangeLog.gz $(SRCDIR)/ChangeLog.rxml.gz
copy_dist:
	@if test -f $(SRCDIR)/VERSION; then :; else \
	  echo 'You need to make pre_dist first!'; \
	  exit 1; \
	fi
	@version=`cat $(SRCDIR)/VERSION | tr 'A-Z ' 'a-z-'`${rc}; \
        TMPDIR="$(TMPDIR)"; \
	if ls -d $$version* >/dev/null 2>&1; then \
	  echo Deleting old distributions...; \
	  rm -rf $$version* || exit 1; \
	else :; fi; \
	mkdir $$TMPDIR$$version; \
	echo Copying files...; \
	(cd $(SRCDIR); tar cf - .)|(cd $(TMPDIR)$$version; tar xf -); \
	if test "`echo $$version| sed s/svn//`" = "$$version" -a \
		"`echo $$version| sed s/test//`" = "$$version" ; then \
	 find $$TMPDIR$$version/. -type d -name '.svn' -print |xargs rm -rf; \
        fi;\
        echo "Current dir is `pwd`" ; \
	echo Cleaning up the copied sources...; \
	cd $$TMPDIR$$version && $(MAKE) spotless && cd $(SRCDIR) ;\
        cd $$TMPDIR$$version && ./autogen.sh ; \
	for f in `find $$version/. -type f -name '*~' -print` \
	  `find $$TMPDIR$$version/. -type f -name 'autom4*' -print` \
	  `find $$TMPDIR$$version/. -type f -name '.#*' -print` \
	  `find $$TMPDIR$$version/. -type f -name 'Makefile' -print` \
	  `find $$TMPDIR$$version/. -type f -name '*.tar*' -print` \
	  `find $$TMPDIR$$version/. -type f -name '#*#' -print`; do \
	  echo $$f; rm -r $$f || exit 1; \
	done; \

tar_dist:
	@version=`cat $(SRCDIR)/VERSION | tr 'A-Z ' 'a-z-'`${rc}; \
	echo "Building tarfile from $$TMPDIR..."; \
	cd $$TMPDIR && tar cf $$version.tar $$version; \
	echo "tar.gz..."; \
	gzip -9 < $$version.tar >$$version.tar.gz; \
	echo "tar.bz2..."; \
	bzip2 -9 < $$version.tar >$$version.tar.bz2; \
	echo "done."; \
	rm -rf $$TMPDIR$$version; \
	rm $$version.tar

dist: clean copy_dist tar_dist 
	@echo "Distribution build complete. Don't forget to run"
	@echo "'make only_bump_version' if this is not a test release."

solaris_pkg: all
	@cd $(SRCDIR)/server/etc/modules; \
	 build=`sed <CaudiumVersion.pmod -e'/__caudium_build__/s/[^0-9]*//gp' -ed|head -1`; \
	 version=`sed <CaudiumVersion.pmod -e'/__caudium_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	 echo "$$version.$$build" >../../../VERSION;
	@tools/build_solaris_pkg.ksh `cat VERSION` $(PIKE)
	@rm VERSION

#
# Compilefarm 
#
# Not yet finished
compilefarm:
	test -d build || mkdir build
	-rm -rf build/compilefarm
	mkdir build/compilefarm
	-$(MAKE) $(MAKE_FLAGS) compilefarm_low
	echo Begin response assembly | tee -a build/compilefarm/compilefarmlog.txt
	date >> build/compilefarm/compilefarmlog.txt
	-cp "$(BUILDDIR)/config.info" build/compilefarm/configinfo.txt

