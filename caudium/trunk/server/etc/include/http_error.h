/*
 * http_error.h
 * ------------
 * This is the class deffinition for the new http error handler.
 * There is no inline doc's - yet. I will add them shortly.
 * It seems to be working correctly and even doesnt crash the server!
 * Template files are in etc/error_templates/ and the new tag <error> is
 * now defined - but only within the scope of http_error_handler.
 *
 * $Id$
 */

class http_error_handler {

    inherit "caudiumlib";

    // Cache for the template file.
    private string my_template;
    int error_code;
    string error_name, error_message;
    string template_name;

    private mapping extra_help =
	([
	  401 : "You have tried to access a page that is protected by a username & password protection scheme such as htaccess or similar.<br>If you feel that you have recieved this page in error then contact the site administrator for more information.",
	  402 : "You have tried to access a page that is protected by a pay-per-view style protection scheme.<br>If you feel that you have recieved this page in error then please contact the site administrator.",
	  402 : "You have tried to access a page that is protected by a pay-per-view style protection scheme.<br>If you feel that you have recieved this page in error then please contact the site administrator.",
	  403 : "You have tried to access a page that is protected by a username & password protection scheme such as htaccess or similar.<br>If you feel that you have recieved this page in error then contact the site administrator for more information.",
	  404 : "You have tried to access an object that Caudium cannot locate on the virtual filesystem(s).<br>If you feel that this is an error, please contact the site administrator, or the author of the referring page.",
	  405 : "You have requested that Caudium handle a method that it doesn't currently support.<br>I would suggest that you contact your system administrator, or the administrator of this site and figure out what your doing wrong.",
	  408 : "It took to long for the request to finish processing, this is probably because a CGI, or other server side script is taking too long to process.<br>If you feel that this is in error, please contact the site administrator.",
	  409 : "There is no documentation available for this error.",
	  410 : "This document is <i>SO</i> gone.",
	  500 : "Something has gone horribly wrong inside the web server (Caudium).<br>This is probably caused by an error in a CGI or other server side script, but can also mean that something is broke.<br>If you feel that you have recieved this page in error then please contact the site administrator.",
	 ]);

    void set_template( string _template_name ) {
        template_name = _template_name;
	object f;
	if ( catch( f = Stdio.File( "etc/error_templates/" + template_name, "r" ) ) ) {
	    if ( catch( f = Stdio.File( "etc/error_templates/default.html", "r" ) ) ) {
		my_template =
		    "<h1><error code>: <error name></h1><br>" +
		    "<error message><br>" +
		    "<b>Caudium was unable to locate the error template file.</b><br>";
	    } else {
		my_template = f->read();
		f->close();
	    }
	} else {
	    my_template = f->read();
	    f->close();
	}
    }

    private string _tag_error( string tag, mapping args ) {
	if ( args->code ) {
	    return sprintf( "%d", error_code );
	} else if ( args->name ) {
	    return html_encode_string( error_name );
	} else if ( args->description ) {
	    if ( extra_help[ error_code ] ) {
		return
		    "<h1>" +
		    html_encode_string( error_name ) +
		    "</h1>" +
		    extra_help[ error_code ] +
		    "<br>";
	    } else {
		return
		    "<h1>" +
		    html_encode_string( error_name ) +
		    "</h1><br>" +
		    "There is currently no documentation on this error.<br>";
	    }
	} else if ( args->message ) {
	    return error_message;
	} else if ( args->stamp ) {
	    return
		"Generated by <version> at <date type=number>";
	} else {
	    return "";
	}
    }

    public mapping handle_error( int _error_code, string _error_name, mixed _error_message, object id ) {
	if ( id->conf->query( "ErrorTheme" ) != template_name ) {
            set_template( id->conf->query( "ErrorTheme" ) );
	}
	error_code = _error_code?_error_code:500;
	error_name = _error_name?_error_name:"Unknown error";
	error_message = _error_message?_error_message:"An unknown error has occurred - this should never have happenned.";
	string error_page = parse_rxml( parse_html( my_template, ([ "error" : _tag_error ]), ([ ]) ), id );
	return http_low_answer( error_code, error_page );
    }

}
