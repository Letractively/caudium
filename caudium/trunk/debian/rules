#!/usr/bin/make -f
# Sample debian/rules that uses debhelper. 
# GNU copyright 1997 by Joey Hess.
#
# This version is for a hypothetical package that builds an
# architecture-dependant package, as well as an architecture-independent
# package.
#
# This is the Caudium Webserver rules file
# $Id$
#
# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This is the debhelper compatability version to use.
export DH_COMPAT=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# we need to know what pike are we using
PIKE=/usr/bin/pike7
PIKE_VERSION=$(shell $(PIKE) -e 'string v; int rel;sscanf(version(), "Pike v%s release %d", v, rel); write(v+"."+rel);')
CVS_SNAPSHOT=$(shell if test -f configure; then echo no; else echo yes; fi)
PIKE_DEBIAN_VER=$(shell debian/debian_pike_version $(PIKE))
PIKE_DEBIAN_VER2=$(shell echo $(PIKE_DEBIAN_VER) | sed -e 's/\(.*\)\(-.*\)/\1/')
SCRIPTS=protocols/tetris.pike bin/pdbi.pike bin/sqladduser.pike \
        bin/ultrasum.pike bin/install.pike 

configure: configure-stamp
configure-stamp:
	dh_testdir
	# Add here commands to configure the package.
	echo "/usr/lib/caudium/lib/$(PIKE_VERSION)" > debian/caudium-modules.dirs
	
	if test "$(CVS_SNAPSHOT)" = "yes"; then \
	    ./autogen.sh; \
	fi
	PIKE_C_INCLUDES=/usr/lib/pike/${PIKE_DEBIAN_VER2}/include/ \
	./configure --prefix=/usr --with-pike=$(PIKE)

	touch configure-stamp

build: configure-stamp build-stamp
build-stamp:
	dh_testdir

	# Add here commands to compile the package.
	$(MAKE)

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp

	# Add here commands to clean up after the build process.
	-$(MAKE) spotless

	dh_clean

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	# Add here commands to install the package into debian/tmp.
	$(MAKE) install_alt prefix=/usr DESTDIR=`pwd`/debian/tmp
	mv -f `pwd`/debian/tmp/usr/lib/caudium/lib/$(PIKE_VERSION)/* \
	   `pwd`/debian/caudium-modules/usr/lib/caudium/lib/$(PIKE_VERSION)
	rm -rf `pwd`/debian/tmp/usr/lib/caudium/lib/$(PIKE_VERSION)/
	cp debian/localhost `pwd`/debian/tmp/etc/caudium/servers/
	
	sed -e 's;/usr/caudium/server;/usr/lib/caudium;g'< \
	 debian/tmp/usr/bin/ultrasum > debian/tmp/usr/bin/ultrasum.new && \
	mv debian/tmp/usr/bin/ultrasum.new debian/tmp/usr/bin/ultrasum ; \
	chmod 755 debian/tmp/usr/bin/ultrasum
	
	for s in $(SCRIPTS); do \
	  sed -e 's;^#\!.*;#\!/usr/bin/pike7;' debian/tmp/usr/lib/caudium/$$s > \
	      debian/tmp/usr/lib/caudium/$$s.new && \
	  mv debian/tmp/usr/lib/caudium/$$s.new debian/tmp/usr/lib/caudium/$$s ; \
	  chmod 755 debian/tmp/usr/lib/caudium/$$s ; \
	done
	
	dh_movefiles

# Build architecture-independent files here.
# Pass -i to all debhelper commands in this target to reduce clutter.
#binary-indep: DH_OPTIONS=-i
binary-indep: build install

# Build architecture-dependent files here.
# Pass -a to all debhelper commands in this target to reduce clutter.
binary-arch: DH_OPTIONS=-a
binary-arch: build install
	# Need this version of debhelper for DH_OPTIONS to work.
	dh_testversion 1.1.17
	dh_testdir
	dh_testroot
	dh_installdebconf
	dh_installdocs
#	dh_installexamples
#	dh_installmenu
#	dh_installemacsen
#	dh_installpam
	dh_installlogrotate
	dh_installinit
#	dh_installcron
#	dh_installmanpages
#	dh_installinfo
	dh_undocumented
	dh_installchangelogs CHANGES
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
	# You may want to make some executables suid here.
#	dh_suidregister
	dh_installdeb
#	dh_makeshlibs
#	dh_perl
	dh_shlibdeps
	dh_gencontrol -u"-Vpikever=$(PIKE_DEBIAN_VER)"
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install
#!/usr/bin/make -f
# Sample debian/rules that uses debhelper. 
# GNU copyright 1997 by Joey Hess.
#
# This version is for a hypothetical package that builds an
# architecture-dependant package, as well as an architecture-independent
# package.
#
# This is the Caudium Webserver rules file
# $Id$
#
# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This is the debhelper compatability version to use.
export DH_COMPAT=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# we need to know what pike are we using
PIKE=/usr/bin/pike7
PIKE_VERSION=$(shell $(PIKE) -e 'string v; int rel;sscanf(version(), "Pike v%s release %d", v, rel); write(v+"."+rel);')
CVS_SNAPSHOT=$(shell if test -f configure; then echo no; else echo yes; fi)

configure: configure-stamp
configure-stamp:
	dh_testdir
	# Add here commands to configure the package.
	echo "pike_ver=$(PIKE_VERSION)" > debian/substvars
	echo "/usr/lib/caudium/lib/$(PIKE_VERSION)" > debian/caudium-modules.dirs
	
	if test "$(CVS_SNAPSHOT)" = "yes"; then \
	    ./autogen.sh; \
	fi
	./configure --prefix=/usr --with-pike=$(PIKE)

	touch configure-stamp

build: configure-stamp build-stamp
build-stamp:
	dh_testdir

	# Add here commands to compile the package.
	$(MAKE)

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp

	# Add here commands to clean up after the build process.
	-$(MAKE) clean

	dh_clean

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	# Add here commands to install the package into debian/tmp.
	$(MAKE) install_alt prefix=/usr DESTDIR=`pwd`/debian/tmp
	mv -f `pwd`/debian/tmp/usr/lib/caudium/lib/$(PIKE_VERSION)/* \
	   `pwd`/debian/caudium-modules/usr/lib/caudium/lib/$(PIKE_VERSION)
	rm -rf `pwd`/debian/tmp/usr/lib/caudium/lib/$(PIKE_VERSION)/
	cp debian/localhost `pwd`/debian/tmp/etc/caudium/
	dh_movefiles

# Build architecture-independent files here.
# Pass -i to all debhelper commands in this target to reduce clutter.
#binary-indep: DH_OPTIONS=-i
binary-indep: build install

# Build architecture-dependent files here.
# Pass -a to all debhelper commands in this target to reduce clutter.
binary-arch: DH_OPTIONS=-a
binary-arch: build install
	# Need this version of debhelper for DH_OPTIONS to work.
	dh_testversion 1.1.17
	dh_testdir
	dh_testroot
	dh_installdebconf
	dh_installdocs
#	dh_installexamples
#	dh_installmenu
#	dh_installemacsen
#	dh_installpam
	dh_installinit
#	dh_installcron
#	dh_installmanpages
#	dh_installinfo
	dh_undocumented
	dh_installchangelogs
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
	# You may want to make some executables suid here.
#	dh_suidregister
	dh_installdeb
#	dh_makeshlibs
#	dh_perl
	dh_shlibdeps
	dh_gencontrol -u"-Vpikever=$(PIKE_VERSION)"
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install
